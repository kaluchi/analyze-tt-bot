<#
.SYNOPSIS
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞—Ö.
.DESCRIPTION
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤–∏–¥–µ–æ –≤ —É–¥–æ–±–Ω—ã–π –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç.
.NOTES
    –ê–≤—Ç–æ—Ä: TikTok Bot Team
    –í–µ—Ä—Å–∏—è: 1.1.0
    –û–±–Ω–æ–≤–ª–µ–Ω–æ: 05.04.2025 - –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–æ–≤
#>
class MediaFormatterService : IMediaFormatterService {
    
    MediaFormatterService() {
        Write-OperationSucceeded -Operation "MediaFormatterService initialization" -FunctionName "MediaFormatterService.Constructor"
    }
    
    [hashtable] FormatMediaInfo([hashtable]$mediaInfoResponse, [string]$authorUsername, [string]$videoUrl, [string]$fullVideoUrl, [string]$filePath = "", [string]$videoTitle = "") { # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä videoTitle, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –≤ –æ—Ç—á–µ—Ç–µ
        Write-OperationStart -Operation "Format media info" -FunctionName "FormatMediaInfo"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ResponseHelper –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if (-not $mediaInfoResponse.Success) {
            Write-OperationFailed -Operation "Format media info" -ErrorMessage $mediaInfoResponse.Error -FunctionName "FormatMediaInfo"
            return New-ServiceResponse -Success $false -ErrorMessage "‚ùå Error: $($mediaInfoResponse.Error)"
        }
        
        $mediaInfo = $mediaInfoResponse.Data;
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç —Å –Ω—É–ª—è
        $report = ""
        
        # 1. –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        if (-not [string]::IsNullOrWhiteSpace($fullVideoUrl) -and $videoUrl -ne $fullVideoUrl) {
            $linkHtml = "üîó Link: <a href='$fullVideoUrl'>$videoUrl</a>"
            $report += $linkHtml + "`n"
        } else {
            $report += "üîó Link: $videoUrl`n"
        }
        
        # 2. –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
        if (-not [string]::IsNullOrWhiteSpace($authorUsername) -and $authorUsername -ne "NA" -and $authorUsername -ne "na") {
            $profileUrl = "https://www.tiktok.com/@$authorUsername"
            $authorHtml = "üë§ Author: <a href='$profileUrl'>@$authorUsername</a>"
            $report += $authorHtml + "`n"
        } elseif (-not [string]::IsNullOrWhiteSpace($authorUsername)) {
            $report += "üë§ Author: @$authorUsername`n"
        }
        
        # 3. –°–µ–∫—Ü–∏—è –≤–∏–¥–µ–æ
        $report += "`nüé¨ VIDEO`n"
        
        # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        if ($mediaInfo.Width -gt 0 -and $mediaInfo.Height -gt 0) {
            $report += "Resolution: $($mediaInfo.Width) x $($mediaInfo.Height)`n"
        } else {
            $report += "Resolution: Unknown`n"
        }
        
        # FPS
        if ($mediaInfo.FPS -gt 0) {
            $report += "FPS: $($mediaInfo.FPS)`n"
        } else {
            $report += "FPS: Unknown`n"
        }
        
        # –ë–∏—Ç—Ä–µ–π—Ç –≤–∏–¥–µ–æ
        if ($mediaInfo.VideoBitRateFormatted -and $mediaInfo.VideoBitRateFormatted -ne "Unknown") {
            $report += "Bitrate: $($mediaInfo.VideoBitRateFormatted.Replace('kbps', 'kb/s'))`n"
        }
        
        # –ö–æ–¥–µ–∫ –≤–∏–¥–µ–æ
        if ($mediaInfo.VideoCodec -and $mediaInfo.VideoCodec -ne "Unknown") {
            $report += "Codec: $($mediaInfo.VideoCodec)`n"
        } else {
            $report += "Codec: Unknown`n"
        }
        
        # 4. –°–µ–∫—Ü–∏—è –∞—É–¥–∏–æ
        $report += "`n"
        
        if ($mediaInfo.HasAudio) {
            $report += "üîä AUDIO`n"
            
            # –§–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ
            $audioFormat = $mediaInfo.AudioCodec
            if ($mediaInfo.AudioCodec -eq "AAC") {
                $audioFormat = "AAC LC SBR PS (AAC)"
            }
            $report += "Format: $audioFormat`n"
            
            # –ë–∏—Ç—Ä–µ–π—Ç –∞—É–¥–∏–æ
            if ($mediaInfo.AudioBitRateFormatted -and $mediaInfo.AudioBitRateFormatted -ne "Unknown") {
                $report += "Bitrate: $($mediaInfo.AudioBitRateFormatted.Replace('kbps', 'kb/s'))`n"
            }
            
            # –ö–∞–Ω–∞–ª—ã
            if ($mediaInfo.AudioChannels -gt 0) {
                $report += "Channels: $($mediaInfo.AudioChannels)`n"
            }
            
            # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
            if ($mediaInfo.AudioSampleRateFormatted -and $mediaInfo.AudioSampleRateFormatted -ne "Unknown") {
                $report += "Sampling Rate: $($mediaInfo.AudioSampleRateFormatted)`n"
            }
        }
        
        # 5. –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        $report += "`nüìÅ General information:`n"
        
        # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if ($mediaInfo.Duration -and $mediaInfo.Duration -ne "Unknown") {
            $durationSeconds = [math]::Floor([float]$mediaInfo.Duration)
            $durationMilliseconds = [math]::Round(([float]$mediaInfo.Duration - $durationSeconds) * 1000)
            $report += "Duration: $durationSeconds s $durationMilliseconds ms`n"
        } elseif ($mediaInfo.DurationFormatted -and $mediaInfo.DurationFormatted -ne "Unknown") {
            $report += "Duration: $($mediaInfo.DurationFormatted)`n"
        } else {
            $report += $this.GetEstimatedDurationString($mediaInfo)
        }
        
        # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if ($mediaInfo.FileSize -gt 0) {
            if ($mediaInfo.FileSize -lt 1MB) {
                $fileSizeKiB = [math]::Round($mediaInfo.FileSize / 1KB, 0)
                $fileSizeKiBStr = $fileSizeKiB.ToString("N0").Replace(",", " ")
                $report += "File Size: $fileSizeKiBStr KiB`n"
            } else {
                $fileSizeMB = [math]::Round($mediaInfo.FileSizeMB * 1024) / 1024
                $fileSizeMBStr = $fileSizeMB.ToString("N3").Replace(",", " ")
                $report += "File Size: $fileSizeMBStr MB`n"
            }
        } else {
            $report += "File Size: Unknown`n"
        }
        
        Write-OperationSucceeded -Operation "Format media info" -FunctionName "FormatMediaInfo"
        return New-ServiceResponse -Success $true -Data $report
    }
    
    # –í—ã–¥–µ–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ —Ä–∞—Å—á–µ—Ç–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    [string] GetEstimatedDurationString([hashtable]$mediaInfo) {
        $videoBitRate = $mediaInfo.VideoBitRate
        $audioBitRate = $mediaInfo.AudioBitRate
        
        if ($videoBitRate -le 0) { $videoBitRate = 500000 }
        if ($audioBitRate -le 0) { $audioBitRate = 64000 }
        
        $totalBitRate = $videoBitRate + $audioBitRate
        
        if ($mediaInfo.FileSize -gt 0 -and $totalBitRate -gt 0) {
            $fileSizeBits = $mediaInfo.FileSize * 8
            $estimatedDuration = $fileSizeBits / $totalBitRate
            
            $seconds = [math]::Floor($estimatedDuration)
            $milliseconds = [math]::Round(($estimatedDuration - $seconds) * 1000)
            
            return "Duration: $seconds s $milliseconds ms`n"
        } else {
            return "Duration: 15 s 0 ms`n"
        }
    }
}
