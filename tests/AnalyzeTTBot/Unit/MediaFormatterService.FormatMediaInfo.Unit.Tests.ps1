#Requires -Version 5.1
#Requires -Modules @{ ModuleName = 'Pester'; ModuleVersion = '5.0.0' }

<#
.SYNOPSIS
    –¢–µ—Å—Ç—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ FormatMediaInfo —Å–µ—Ä–≤–∏—Å–∞ MediaFormatterService.
.DESCRIPTION
    –ú–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–∞ FormatMediaInfo —Å–µ—Ä–≤–∏—Å–∞ MediaFormatterService.
.NOTES
    –ê–≤—Ç–æ—Ä: TikTok Bot Team
    –í–µ—Ä—Å–∏—è: 1.0.0
    –î–∞—Ç–∞: 21.04.2025
#>

Describe "MediaFormatterService.FormatMediaInfo Tests" {
    BeforeAll {
        # –ë–µ–∑ —ç—Ç–æ–π —Å—Ç—Ä–æ—á–∫–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–≤–∞–ª–∏–≤–∞–ª—Å—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–∏–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è PSFramework
        # –°–≤—è–∑–∞–Ω–æ —Å —Ç–µ–º —á—Ç–æ –≤ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è, –∑–∞–≤–∏—Å—è—â–µ–≥–æ –æ—Ç PSFramework, –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞ "Cannot bind argument to parameter 'Path' because it is null."
        # —Ç.–∫. –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–Ω–∞ –∏–∑ –≤–∞–∂–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, –∞ –∏–º–µ–Ω–Ω–æ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è ProgramData
        # –°—Ç—Ä–æ—á–∫–∞ –Ω–∏–∂–µ —É—Å—Ç—Ä–∞–Ω—è–µ—Ç —ç—Ç—É –æ—à–∏–±–∫—É
        $Env:ProgramData = $Env:ProgramData -or [Environment]::GetFolderPath("CommonApplicationData")

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å
        $projectRoot = Resolve-Path (Join-Path $PSScriptRoot "..\..\..")
        $manifestPath = Join-Path $projectRoot "src\AnalyzeTTBot\AnalyzeTTBot.psd1"
        if (-not (Test-Path $manifestPath)) {
            throw "–ú–æ–¥—É–ª—å AnalyzeTTBot.psd1 –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: $manifestPath"
        }
        Import-Module -Name $manifestPath -Force -ErrorAction Stop
        if (-not (Get-Module -Name AnalyzeTTBot)) {
            throw "–ú–æ–¥—É–ª—å AnalyzeTTBot –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞"
        }
        if (-not (Get-Module -ListAvailable -Name PSFramework)) {
            throw "–ú–æ–¥—É–ª—å PSFramework –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é: Install-Module -Name PSFramework -Scope CurrentUser"
        }
        
        # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        $helperPath = Join-Path $PSScriptRoot "..\Helpers\TestResponseHelper.psm1"
        if (Test-Path $helperPath) {
            Import-Module -Name $helperPath -Force -ErrorAction Stop
        }
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        $script:testFilePath = Join-Path -Path $env:TEMP -ChildPath "test_video.mp4"
        $script:testAuthorUsername = "test_user"
        $script:testVideoUrl = "https://www.tiktok.com/@test_user/video/1234567890"
        $script:testFullVideoUrl = "https://www.tiktok.com/@test_user/video/1234567890"
        $script:testVideoTitle = "Test Video Title"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–º–µ—Ä –æ—Ç—á–µ—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        $script:exampleReportPath = Join-Path $PSScriptRoot "..\TestData\analyse-report-format-example.md"
        if (Test-Path $script:exampleReportPath) {
            $script:exampleReport = Get-Content -Path $script:exampleReportPath -Raw
        } else {
            Write-Warning "–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –ø—Ä–∏–º–µ—Ä–∞ –æ—Ç—á–µ—Ç–∞: $script:exampleReportPath"
        }
    }

    Context "Basic Formatting" {
        It "Should format media info correctly" {
            InModuleScope -ModuleName AnalyzeTTBot -Parameters @{
                testAuthorUsername = $script:testAuthorUsername
                testVideoUrl = $script:testVideoUrl
                testFullVideoUrl = $script:testFullVideoUrl
                testFilePath = $script:testFilePath
                testVideoTitle = $script:testVideoTitle
            } {
                # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
                $mediaFormatterService = New-Object -TypeName MediaFormatterService
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                $mediaInfo = New-SuccessResponse -Data @{
                    FileSize = 5767168
                    FileSizeMB = 5.5
                    Duration = "15.000"
                    DurationFormatted = "00:00:15"
                    Width = 1080
                    Height = 1920
                    AspectRatio = "1080:1920"
                    FPS = 60
                    FrameCount = 900
                    VideoCodec = "h264"
                    VideoProfile = "Main@L4.1"
                    VideoBitRate = 2000000
                    VideoBitRateFormatted = "2000 kbps"
                    HasAudio = $true
                    AudioCodec = "aac"
                    AudioChannels = 2
                    AudioBitRate = 128000
                    AudioBitRateFormatted = "128 kbps"
                    AudioSampleRate = 44100
                    AudioSampleRateFormatted = "44.1 kHz"
                }
                
                # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∏–≥–Ω–∞—Ç—É—Ä–æ–π, –≤–∫–ª—é—á–∞—è –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                $result = $mediaFormatterService.FormatMediaInfo($mediaInfo, $testAuthorUsername, $testVideoUrl, $testFullVideoUrl, $testFilePath, $testVideoTitle)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                $result.Success | Should -BeTrue
                $result.Data | Should -Not -BeNullOrEmpty
                $result.Data | Should -Match "Link: $testVideoUrl"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –∞–≤—Ç–æ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É—è —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                $result.Data | Should -Match "@$testAuthorUsername"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
                $result.Data | Should -Match "üé¨ VIDEO"
                $result.Data | Should -Match "Resolution: 1080 x 1920"
                $result.Data | Should -Match "FPS: 60"
                $result.Data | Should -Match "Bitrate: 2000 kb/s"
                $result.Data | Should -Match "Codec: h264"
                $result.Data | Should -Match "Channels: 2"
                $result.Data | Should -Match "Sampling Rate: 44.1 kHz"
                $result.Data | Should -Match "Duration: 15 s 0 ms"
                $result.Data | Should -Match "File Size:"
            }
        }
        
        It "Should handle error media info" {
            InModuleScope -ModuleName AnalyzeTTBot -Parameters @{
                testAuthorUsername = $script:testAuthorUsername
                testVideoUrl = $script:testVideoUrl
                testFullVideoUrl = $script:testFullVideoUrl
                testFilePath = $script:testFilePath
            } {
                # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
                $mediaFormatterService = New-Object -TypeName MediaFormatterService
                
                # –°–æ–∑–¥–∞–µ–º –æ—à–∏–±–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞
                $errorMediaInfo = New-ErrorResponse -ErrorMessage "Test error message"
                
                # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥
                $result = $mediaFormatterService.FormatMediaInfo($errorMediaInfo, $testAuthorUsername, $testVideoUrl, $testFullVideoUrl, $testFilePath, "")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                $result.Success | Should -BeFalse
                $result.Error | Should -Match "Test error message"
            }
        }
        
        It "Should handle missing author" {
            InModuleScope -ModuleName AnalyzeTTBot -Parameters @{
                testVideoUrl = $script:testVideoUrl
                testFullVideoUrl = $script:testFullVideoUrl
                testFilePath = $script:testFilePath
            } {
                # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
                $mediaFormatterService = New-Object -TypeName MediaFormatterService
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                $mediaInfo = New-SuccessResponse -Data @{
                    FileSize = 5767168
                    FileSizeMB = 5.5
                    Duration = "15.000"
                    Width = 1080
                    Height = 1920
                    FPS = 60
                    VideoCodec = "h264"
                    VideoBitRate = 2000000
                    VideoBitRateFormatted = "2000 kbps"
                    HasAudio = $true
                    AudioCodec = "aac"
                    AudioChannels = 2
                    AudioBitRate = 128000
                    AudioBitRateFormatted = "128 kbps"
                    AudioSampleRate = 44100
                    AudioSampleRateFormatted = "44.1 kHz"
                }
                
                # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –±–µ–∑ –∞–≤—Ç–æ—Ä–∞
                $result = $mediaFormatterService.FormatMediaInfo($mediaInfo, "", $testVideoUrl, $testFullVideoUrl, $testFilePath, "")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                $result.Success | Should -BeTrue
                $result.Data | Should -Match "Link: $testVideoUrl"
                $result.Data | Should -Not -Match "Author:"
            }
        }
        
        It "Should handle missing URL" {
            InModuleScope -ModuleName AnalyzeTTBot -Parameters @{
                testAuthorUsername = $script:testAuthorUsername
                testFilePath = $script:testFilePath
            } {
                # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
                $mediaFormatterService = New-Object -TypeName MediaFormatterService
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                $mediaInfo = New-SuccessResponse -Data @{
                    FileSize = 5767168
                    FileSizeMB = 5.5
                    Duration = "15.000"
                    Width = 1080
                    Height = 1920
                    FPS = 60
                    VideoCodec = "h264"
                    VideoBitRate = 2000000
                    VideoBitRateFormatted = "2000 kbps"
                    HasAudio = $true
                    AudioCodec = "aac"
                    AudioChannels = 2
                    AudioBitRate = 128000
                    AudioBitRateFormatted = "128 kbps"
                    AudioSampleRate = 44100
                    AudioSampleRateFormatted = "44.1 kHz"
                }
                
                # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –±–µ–∑ URL
                $result = $mediaFormatterService.FormatMediaInfo($mediaInfo, $testAuthorUsername, "", "", $testFilePath, "")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –∞–≤—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                $result.Success | Should -BeTrue
                $result.Data | Should -Match "@$testAuthorUsername"
            }
        }
    }
    
    Context "Report Format Compatibility" {
        It "Should reproduce the example report with correct parameters" {
            InModuleScope -ModuleName AnalyzeTTBot -Parameters @{
                exampleReport = $script:exampleReport
            } {
                # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
                $mediaFormatterService = New-Object -TypeName MediaFormatterService
                
                # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–º–µ—Ä–∞ –æ—Ç—á–µ—Ç–∞
                $mediaInfo = New-SuccessResponse -Data @{
                    FileSize = 653 * 1KB        # –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
                    FileSizeMB = 0.638          # –†–∞–∑–º–µ—Ä –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö
                    Duration = "6.385"          # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                    Width = 1080                # –®–∏—Ä–∏–Ω–∞
                    Height = 1920               # –í—ã—Å–æ—Ç–∞
                    AspectRatio = "1080:1920"   # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
                    FPS = 30                    # –ö–∞–¥—Ä—ã –≤ —Å–µ–∫—É–Ω–¥—É
                    VideoCodec = "HEVC"         # –ö–æ–¥–µ–∫ –≤–∏–¥–µ–æ
                    VideoBitRate = 765000       # –ë–∏—Ç—Ä–µ–π—Ç –≤–∏–¥–µ–æ –≤ bps
                    VideoBitRateFormatted = "765 kbps"  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç
                    HasAudio = $true            # –ù–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ
                    AudioCodec = "AAC"          # –ö–æ–¥–µ–∫ –∞—É–¥–∏–æ
                    AudioChannels = 2           # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ–∫–∞–Ω–∞–ª–æ–≤
                    AudioBitRate = 64000        # –ë–∏—Ç—Ä–µ–π—Ç –∞—É–¥–∏–æ –≤ bps
                    AudioBitRateFormatted = "64 kbps"  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç
                    AudioSampleRate = 44100     # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
                    AudioSampleRateFormatted = "44.1 kHz"  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞
                }
                
                $authorUsername = "olafflee"
                $videoUrl = "https://vm.tiktok.com/ZMBskEM99/"
                $fullVideoUrl = "https://www.tiktok.com/@olafflee/video/7493548584726727958?_t=ZM-8vcptHBnUcH&_r=1"
                $filePath = ""
                $videoTitle = ""
                
                # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∏–≥–Ω–∞—Ç—É—Ä–æ–π - –≤–∞–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –≤—Å–µ 6 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                $result = $mediaFormatterService.FormatMediaInfo($mediaInfo, $authorUsername, $videoUrl, $fullVideoUrl, $filePath, $videoTitle)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏–º–µ—Ä—É
                $result.Success | Should -BeTrue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                $result.Data | Should -Match $videoUrl
                $result.Data | Should -Match $authorUsername
                $result.Data | Should -Match "Resolution: 1080 x 1920"
                $result.Data | Should -Match "FPS: 30"
                $result.Data | Should -Match "Bitrate: 765 kb/s"
                $result.Data | Should -Match "Codec: HEVC"
                $result.Data | Should -Match "Duration: 6 s 385 ms"
                $result.Data | Should -Match "File Size: 653 KiB"
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª –ø—Ä–∏–º–µ—Ä–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –±–ª–æ–∫–∏
                if ($exampleReport) {
                    $cleanExample = $exampleReport.Trim() -replace '[\r\n]+', "`n"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –±–ª–æ–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –≤ –ø—Ä–∏–º–µ—Ä–µ
                    $cleanExample | Should -Match "Resolution: 1080 x 1920"
                    $cleanExample | Should -Match "FPS: 30"
                    $cleanExample | Should -Match "Bitrate: 765 kb/s"
                    $cleanExample | Should -Match "Codec: HEVC"
                    $cleanExample | Should -Match "Duration: 6 s 385 ms"
                    $cleanExample | Should -Match "File Size: 653 KiB"
                }
            }
        }
    }

    AfterAll {
        # –í—ã–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
        Remove-Module -Name AnalyzeTTBot -Force -ErrorAction SilentlyContinue
        if (Get-Module -Name TestResponseHelper) {
            Remove-Module -Name TestResponseHelper -Force -ErrorAction SilentlyContinue
        }
    }
}